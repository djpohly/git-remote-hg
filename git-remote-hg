#!/usr/bin/env python2
"""Used by git-remote to interact with remote Mercurial repositories.

This command should not be run by the user.  Rather, it is invoked by
the Git core when accessing remotes of the form `hg::HGURL', where
HGURL is any valid Mercurial repository URL.

Executed with two arguments: the name of the remote, and the remote
URL.  (For URLs specified directly on the command line, the name of
the remote is `hg::HGURL'.)
"""


from __future__ import print_function

import sys, collections, subprocess
import mercutil as hg


verbosity = 1
dryrun = False

def die(msg):
	progname = sys.argv[0].rsplit("/", 1)[-1]
	print("%s: %s" % (progname, msg), file=sys.stderr)
	sys.exit(1)

def dbgprint(*vals, **kwargs):
	print(*vals, file=sys.stderr, **kwargs)
	print(*vals, **kwargs)

def option_verbosity(val):
	try:
		verbosity = int(val)
	except ValueError:
		dbgprint("error verbosity not a number")
	else:
		dbgprint("ok")

def option_dryrun(val):
	if val == "true":
		dryrun = True
		dbgprint("ok")
	elif val == "false":
		dryrun = False
		dbgprint("ok")
	else:
		dbgprint("error dry-run not true|false")


def rawtree(treeish, recurse=False):
	# XXX CalledProcessError here means treeish not found/valid
	args = ["git", "ls-tree", treeish]
	if recurse:
		args.append("-r")
	return (l[:-1].split(None, 3) for l in subprocess.Popen(args,
			bufsize=1, stdout=subprocess.PIPE).stdout)
def rawblob(obj):
	# XXX CalledProcessError here means object not found/valid
	args = ["git", "cat-file", "blob", obj]
	return subprocess.check_output(args)

class Ftree(object):
	def __init__(self, sha, nodeid, extra):
		self.sha = sha
		self.nodeid = nodeid
		self.extra = extra
	def text(self):
		return hg.buildfile(rawblob(self.sha), self.extra)
class Mtree(object):
	def __init__(self, sha, nodeid, files):
		self.sha = sha
		self.nodeid = nodeid
		self.files = files
class Ctree(object):
	def __init__(self, sha, nodeid, mf, extra):
		self.sha = sha
		self.nodeid = nodeid
		self.mf = mf
		self.extra = extra
def treefromsha(treesha):
	sha = nodeid = mtree = ftree = None
	extra = {}
	tree = rawtree(treesha)
	for ent in tree:
		if ent[3] == "sha":
			sha = rawblob(ent[2])
		elif ent[3] == "nodeid":
			nodeid = rawblob(ent[2])
		elif ent[3] == "mtree":
			mtree = ent[2]
		elif ent[3] == "ftree":
			ftree = ent[2]
		elif ent[3].startswith("extra."):
			name = ent[3][6:].replace(": ", "/")
			extra[name] = rawblob(ent[2])
	if mtree:
		return Ctree(sha, nodeid, mtree, extra)
	if ftree:
		return Mtree(sha, nodeid, ftree)
	return Ftree(sha, nodeid, extra)

class RevMap(object):
	def __init__(self, ref):
		self.revs = {e[3]: e[2] for e in rawtree(ref)}
		self.cache = {}
		self.new = {}
	def get(self, idorsha):
		tree = self.new.get(idorsha) or self.cache.get(idorsha)
		if tree:
			return tree
		tree = treefromsha(self.revs[idorsha])
		self.cache[idorsha] = tree
		return tree
	def add(self, idorsha, tree):
		# If we do add a duplicate, it had better be exactly the same
		test = self.new.setdefault(tree)
		assert test.nodeid == tree.nodeid
	def newftree(self, blobsha, fp1, fp2, exc):
		extra = applyextra(fp1.extra, exc.extra)
		text = hg.buildfile(rawblob(blobsha), extra)
		pn1 = fp1 and fp1.nodeid or NULLID
		pn2 = fp2 and fp2.nodeid or NULLID
		nodeid = hg.hash(text, pn1, pn2)
		return Ftree(blobsha, nodeid, extra)
	def newmtree(self, treesha, mp1, mp2, exc):
		files = {}
		changed = []
		for ent in rawtree(treesha, recurse=True):
			fname = ent[3]
			if exc.f[fname].parent:
				# XXX handle it
				raise NotImplementedError
			fp1 = mp1 and mp1.ftree.get(fname)
			fp2 = mp2 and mp2.ftree.get(fname)
			if fp1 and ent[2] == fp1.sha and \
			               (not fp2 or ent[2] == fp2.sha):
				files[fname] = fp1
			else:
				files[fname] = self.newftree(ent[3], fp1, fp2,
				                             exc.f[fname])
				changed.append(fname)
		text = "".join(["%s\0%s%s\n" % (path, f.nodeid, f.flags) for
		                path, f in sorted(files.items())])
		pn1 = mp1 and mp1.nodeid or NULLID
		pn2 = mp2 and mp2.nodeid or NULLID
		nodeid = hg.hash(text, mp1.nodeid, mp2.nodeid)
		return Mtree(treesha, nodeid, files), changed
	def newctree(self, commitsha):
		tree, author, date, p1, p2, msg, exc = \
		              parsecommit(rawcommit(commitsha))
		if exc.m.parent:
			# XXX handle it
			raise NotImplementedError
		mp1 = p1 and p1.mtree
		mp2 = p2 and p2.mtree
		if mp1 and tree == mp1.sha and (not mp2 or tree == mp2.sha):
			mtree = mp1
		else:
			mtree = self.newmtree(tree, mp1, mp2, exc)
		extra = applyextra(p1.extra, exc.c.extra)
		changed = difftree(mp1.sha, tree)
		text = "%s\n%s\n%d %d %s\n%s\n\n%s" % (mtree.nodeid, author,
		                    date.secs, date.tz, hg.commitextra(extra),
		                    "\n".join(changed), msg)
		pn1 = p1 and p1.nodeid or NULLID
		pn2 = p2 and p2.nodeid or NULLID
		nodeid = hg.hash(text, pn1, pn2)
		return Ctree(commitsha, nodeid, mtree.nodeid, extra)

Rev = collections.namedtuple("Rev", ["delta", "nodeid", "p1", "p2", "cs"])
RevLog = collections.namedtuple("RevLog", ["log", "base"])
class RevCache(object):
	def __init__(self, revmap):
		self.csets = None
		self.mfs = None
		self.files = {}
		self.revmap = revmap
	def _addentry(self, revlog, text, nodeid, p1, p2, cs):
		try:
			log, base = revlog
		except TypeError:
			log = []
			if p1 == hg.NULLID:
				base = ""
			else:
				base = self.revmap.get(p1).text()
		delta = hg.textdiff(base, text)
		log.append(Rev(delta, nodeid, p1, p2, cs))
		return RevLog(log, text)
	def addcset(self, text, nodeid, p1, p2):
		self.csets = self._addentry(self.csets, text, nodeid, p1, p2,
		                            nodeid)
		return node
	def addmf(self, text, nodeid, p1, p2, cs):
		self.mfs = self._addentry(self.mfs, text, nodeid, p1, p2, cs)
		return node
	def addfile(self, path, text, nodeid, p1, p2, cs):
		self.files[path] = self._addentry(self.files.get(path), text,
		                                  nodeid, p1, p2, cs)
		return node
	def tobundle(self):
		return hg.makebundle(self.csets, self.mfs, self.files)

class HgRemote(object):
	def __init__(self, hgui, url, name):
		self.ui = hgui
		self.peer = hg.Peer(self.ui, url)
		self.name = name
		self.refmap = {}

	def capabilities(self):
		#dbgprint("option")
		dbgprint("fetch")
		dbgprint("import")
		dbgprint("push")
		if self.name:
			dbgprint("refspec refs/heads/*:refs/remotes/%s/*" %
			         self.name)
		dbgprint()
		sys.stdout.flush()

	def list(self):
		self.refmap = {}
		seen = set()
		# Give bookmarks priority
		for name, sha in self.peer.bookmarks().viewitems():
			self.refmap["bm/" + name] = sha
			seen.add(sha)

		# branchmap() returns heads in recency order, tip first
		branchmap = self.peer.branchmap()
		for name, heads in branchmap.viewitems():
			for i, sha in enumerate([h for h in heads
			                         if h not in seen]):
				self.refmap["br/" + name + "/" + str(i)] = sha
		dbgprint(*["? " + name for name in self.refmap.viewkeys()],
		         sep="\n")

		# What do we want to map HEAD to?
		# - Tipmost revision on default branch?  Good for initial
		#   clone.
		# - Depends on TKPA of previous remote HEAD?  Sounds plausible.
		self.refmap["HEAD"] = branchmap["default"][0]
		dbgprint("? HEAD")

		dbgprint()
		sys.stdout.flush()

	def fastimport(self, ref):
		die("import not yet implemented")

	def push(self, ref):
		die("push not yet implemented")

def parse_option(cmd):
	args = cmd.split(None, 1)
	if args[0] == "verbosity":
		option_verbosity(args[1])
	elif args[0] == "dry-run":
		option_dryrun(args[1])
	else:
		dbgprint("unsupported\n")
	sys.stdout.flush()

def main():
	"""Main function for Mercurial helper."""
	# Arguments should be:
	# 1. Name of remote, or full remote URL (with "hg::" prefix)
	# 2. Remote URL without prefix
	if len(sys.argv) != 3:
		die("expecting exactly two arguments")

	# ':' is illegal in Git refs but required in full URLs, so we
	# can use it to distinguish them here.
	rname = sys.argv[1] if ":" not in sys.argv[1] else None

	# Set up Mercurial objects: ui is settings/context
	hgui = hg.Ui()
	# XXX set up proxy options and other stuff in ui
	remote = HgRemote(hgui, sys.argv[2], rname)

	# Handle commands issued by Git
	cmd = sys.stdin.readline().split(None, 1)
	importrefs = pushrefs = []
	while cmd:
		print(cmd, file=sys.stderr)

		if cmd[0] == "option":
			parse_option(cmd[1])
		elif cmd[0] == "import":
			refs = [cmd[1]]
			cmd = sys.stdin.readline().split(None, 1)
			while True:
				if len(cmd) == 0:
					break
				if cmd[0] == "import":
					refs.append(cmd[1])
				elif cmd[0] == "option":
					parse_option(cmd[1])
				else:
					die("import batch interrupted")
			remote.fastimport(refs)
		elif cmd[0] == "push":
			refs = [cmd[1]]
			cmd = sys.stdin.readline().split(None, 1)
			while True:
				if len(cmd) == 0:
					break
				if cmd[0] == "push":
					refs.append(cmd[1])
				elif cmd[0] == "option":
					parse_option(cmd[1])
				else:
					die("push batch interrupted")
			remote.push(refs)
		elif cmd[0] == "capabilities":
			remote.capabilities()
		elif cmd[0] == "list":
			remote.list()
		else:
			die("unrecognized command `%s'" % cmd[0])
		cmd = sys.stdin.readline().split(None, 1)


if __name__ == "__main__":
	main()
